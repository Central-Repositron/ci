/*
 * This build file was auto generated by 'suv' at '1/25/14 10:32 AM' with Gradle 1.10
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/1.10/userguide/tutorial_java_projects.html
 */

// Apply plugin automation
apply from: 'http://www.tellurianring.com/projects/gradle-plugins/gradle-templates/apply.groovy'
// apply from: 'https://raw.github.com/akhikhl/gretty/master/pluginScripts/gretty.plugin'

// Apply the plugins
apply plugin: 'java'
apply plugin: 'signing'
apply plugin: 'eclipse'
apply plugin: 'eclipse-wtp'
apply plugin: 'maven'
apply plugin: 'war'
//apply plugin: 'tomcat'
//apply plugin: 'jboss'

sourceCompatibility = 1.8
targetCompatibility = 1.8
version = '1.0'

task wrapper (type:Wrapper) {
    gradleVersion = 2.2
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'lib' folder for resolving your local dependencies
    // Use 'maven central' for resolving your unmet dependencies.
    // The maven local .m2 directory should be present and prepopulated
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
    jcenter()
    mavenLocal()
    flatDir {
        name 'localrepo'
    }
    flatDir {
        name 'dist'
    }
    maven {
        url "http://download.java.net/maven/2/"
        url "http://download.java.net/maven/glassfish/"
        url "http://maven.repository.redhat.com/techpreview/all/"
        url "http://htmleasy-maven.googlecode.com/svn/trunk/"
        url "http://mvnrepository.com/artifact/javax.servlet"
    }
    // mavenRepo name: 'jboss-nexus', url: "http://repository.jboss.org/nexus/content/groups/public/"
}

repositories {
    localrepo {
        dirs "../resources/WEB-INF/lib"
    }
    dist {
        dirs "repo"
    }
}

// In this section you declare the dependencies for your production and test code
dependencies {
    providedCompile group: 'javax', name: 'javaee-api', version: '6+'

    // putting all jars from 'libs' onto compile classpath
    compile fileTree('../resources/WEB-INF/lib')

    // mysql connector j
    compile 'mysql:mysql-connector-java:5.1.28'

    // The spring gradle handle
    compile 'org.springframework:spring-context:4.0.0.RELEASE'

    // Hibernate repositories
    compile 'org.hibernate:hibernate-core:4.3.1.Final'
    // Hibernate JPA Repositories
    compile 'org.hibernate:hibernate-entitymanager:4+'
    compile 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1+'

    // Hibernate Cache-Management Repositories
    compile 'org.hibernate:hibernate-c3p0:4.3.1.Final'
    compile 'org.hibernate:hibernate-ehcache:4.3.1.Final'

    // EJB Repositories
    compile 'org.jboss.spec.javax.ejb:jboss-ejb-api_3.1_spec:1+'
    compile 'javax.validation:validation-api:1+'

    // Logging services
    // Log4j Logging System used by the Application
    compile 'log4j:log4j:1.2.16'
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.5'
    // log4j over slf4j
    compile 'org.slf4j:log4j-over-slf4j:1.7.5'
    // log4j slf4j binding
    compile 'org.slf4j:slf4j-log4j12:1.7.5'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    // No need to put test.useJUnit() separately as it is the default setting in java plugin
    testCompile 'junit:junit:4.11'
}

// gretty config for deployment
// gretty { port = 8080 contextPath = '/' servletContainer = 'tomcat8' }

// Configuration versioning parameters for eclipse task
eclipse {
    wtp {
        facet {
            facet name: 'jst.java', version: '1.7'
	    facet name: 'jst.web', version: '3.0'
        }
        component {
            contextPath='/'
        }
    }
}

// WebApp Content Folder
webAppDirName = "../resources"

/*
// Currently using sourceSets to configure the complete folder structure.
// As and when the requrirement of further customizations in war arises, this Section might be used.
// However resorting to such complications should be apprehended.
war {
    from 'src/rootContent' // adds a file-set to the root of the archive
    webInf { from 'src/additionalWebInf' } // adds a file-set to the WEB-INF dir.
    classpath fileTree('additionalLibs') // adds a file-set to the WEB-INF/lib dir.
    classpath configurations.moreLibs // adds a configuration to the WEB-INF/lib dir.
    webXml = file('src/someWeb.xml') // copies a file to WEB-INF/web.xml
}
*/

// In this section you define all the Source Sets. Should not be altered without colsulting admin.
sourceSets {
    main {
        java {
            srcDir "../src/main/java/com/sayantan/**"
            exclude "**/*Test.java"
        }
        resources {
            srcDirs = ["../config", "../src"]
        }
    }
    test {
        java {
            srcDirs = ["../src/main/java/com/sayantan/action/test", "../src/main/java/com/sayantan/actionController/test"]
            include "**/*Test.java"
        }
    }
}

uploadArchives {
    repositories {
        add project.repositories.dist
    }
}
// Configuration settings for various tasks
// Basically to make them transitive
configurations {
    compile {
        description = "compile classpath"
        transitive = true
    }
    runtime {
        extendsFrom compile
    }
}

// Synchronise and Pretty-fy
// The o/p of this section should be present in resources/etc folder for reference.
// This task  can be used to list out all the dependencies
task list(dependsOn: configurations.compile)<< {
    println "classpath = ${configurations.compile.collect{File file -> file.name}}"
}
// This task to be used for synchronizing the library if any manual manipulation is done.
task libs(type:Sync) {
    from configurations.runtime
    into "$buildDir/lib"
}
// This is the equivalent of "run". It will run build -> dist -> clean in order.
task ci(dependsOn: ['clean', 'build', 'uploadArchives']) {
    uploadArchives.mustRunAfter build
    uploadArchives.finalizedBy clean
}
// Redundant task to scrub the repo
task scrub(type: Delete) {
    delete "build"
}
// print the o/p on console
sourceSets.all {
    println name
}

